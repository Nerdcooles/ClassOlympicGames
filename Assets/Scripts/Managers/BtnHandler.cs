using UnityEngine;using UnityEngine.UI;using System.Collections;using TouchScript.Gestures;using System;/** * Manage buttons' colors and gestures for all devices */public class BtnHandler : MonoBehaviour{				public GameManager.ePlayers player;	private GameManager.eColors color;	private Image s_renderer;	private Sprite s_pressed;	private Sprite s_released;	public delegate void Gesture ();	public event Gesture OnPressed;	public event Gesture OnReleased;	private LevelManager lvm;	private bool canPress;	void Awake ()	{		try {			lvm = GameObject.Find ("LevelManager").GetComponent<LevelManager> ();		} catch {			//award level		}		canPress = false;	}	void Start ()	{		try {			color = GameManager.Instance.GetColor (player);			s_released = Resources.Load <Sprite> ("Sprites/Buttons/" + color.ToString () + "_" + player.ToString ());			s_pressed = Resources.Load <Sprite> ("Sprites/Buttons/" + color.ToString () + "_" + player.ToString () + "_pressed");			s_renderer = gameObject.GetComponent<Image> ();			s_renderer.sprite = s_released;		} catch {			gameObject.SetActive (false);		}	}	void Update ()	{		if (Input.GetButtonDown ("Player" + (player.GetHashCode () + 1))) {			Press (null, null);		}		if (Input.GetButtonUp ("Player" + (player.GetHashCode () + 1))) {			Release (null, null);		}	}	private void OnEnable ()	{		gameObject.GetComponent<PressGesture> ().Pressed += Press;		gameObject.GetComponent<ReleaseGesture> ().Released += Release;		if (lvm != null) {			lvm.OnCountdown += EnableButton;			lvm.OnTimeIsUp += DisableButton;		}	}		private void OnDisable ()	{		gameObject.GetComponent<PressGesture> ().Pressed -= Press;		gameObject.GetComponent<ReleaseGesture> ().Released -= Release;		if (lvm != null) {			lvm.OnCountdown -= EnableButton;			lvm.OnTimeIsUp -= DisableButton;		}	}	/**	 * Enable pressure	 */	public void EnableButton ()	{		canPress = true;	}	/**	 * Disable pressure	 */	public void DisableButton ()	{		canPress = false;		s_renderer.sprite = s_released;	}	/**	 * Touchscript method	 */	public void Press (object sender, EventArgs e)	{		if (canPress) {			s_renderer.sprite = s_pressed;			if (OnPressed != null)				OnPressed ();		}	}		/**	 * Touchscript method	 */	public void Release (object sender, EventArgs e)	{		if (canPress) {			s_renderer.sprite = s_released;			if (OnReleased != null)				OnReleased ();			}	}}